{"remainingRequest":"/Users/danielsecco/Downloads/quasela-master/node_modules/thread-loader/dist/cjs.js!/Users/danielsecco/Downloads/quasela-master/node_modules/babel-loader/lib/index.js!/Users/danielsecco/Downloads/quasela-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danielsecco/Downloads/quasela-master/src/components/comps/Geolocate.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/danielsecco/Downloads/quasela-master/src/components/comps/Geolocate.vue","mtime":1529007987000},{"path":"/Users/danielsecco/Downloads/quasela-master/node_modules/cache-loader/dist/cjs.js","mtime":1528752079000},{"path":"/Users/danielsecco/Downloads/quasela-master/node_modules/thread-loader/dist/cjs.js","mtime":1528752084000},{"path":"/Users/danielsecco/Downloads/quasela-master/node_modules/babel-loader/lib/index.js","mtime":1519636541000},{"path":"/Users/danielsecco/Downloads/quasela-master/node_modules/vue-loader/lib/index.js","mtime":1525995699000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar latData = 0;\nvar longData = 0;\nvar precData = 0;\nvar altData = 0;\nvar preaData = 0;\nvar headData = 0; //var firebase = require('firebase');\n\nvar $ = require('jquery');\n\nimport Swiper from 'swiper';\nvar geoOptions = {\n  enableHighAccuracy: true\n};\n\nvar geoError = function (error) {\n  console.log('Error occurred. Error code: ' + error.code); // error.code can be:\n  //   0: unknown error\n  //   1: permission denied\n  //   2: position unavailable (error response from location provider)\n  //   3: timed out\n};\n\nwindow.getLocationV = function getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.watchPosition(showPosition, geoError, geoOptions);\n  } else {\n    $(\"#demo\").append(\"Geolocation is not supported by this browser.\");\n  }\n\n  function showPosition(position) {\n    /*   $(\"#demo\").text(\"Latitude: \" + position.coords.latitude +\n           \" Longitude: \" + position.coords.longitude + 'precisao:  ' + position.coords.accuracy + 'altitude:  ' + position.coords.altitude + 'altitude pcsn :  ' + position.coords.altitudeAccuracy + 'orientacao:  ' + position.coords.heading);*/\n\n    /* $(\"#demo\").append(\"Latitude: \" + position.coords.latitude + \n    \"<br>Longitude: \" + position.coords.longitude );*/\n    latData = position.coords.latitude;\n    longData = position.coords.longitude;\n    precData = position.coords.accuracy;\n    altData = position.coords.altitude;\n    preaData = position.coords.altitudeAccuracy;\n    headData = position.coords.heading; // this.$store.dispath('setGeoL', {latitude: latData, longitude: longData})\n\n    document.getElementById(\"latNum\").value = latData;\n    document.getElementById(\"lat1\").innerHTML = \"Latitude: \" + latData;\n    document.getElementById(\"long1\").innerHTML = \" Longitude: \" + longData;\n    document.getElementById(\"alt1\").innerHTML = 'Altitude:  ' + altData;\n    document.getElementById(\"prec\").innerHTML = 'Precisao c :  ' + precData;\n    document.getElementById(\"prea\").innerHTML = 'altitude pcsn :  ' + preaData;\n    document.getElementById(\"head\").innerHTML = 'orientacao:  ' + headData;\n    document.getElementById(\"logNum\").value = longData;\n\n    function xx(position) {\n      var coord4 = {\n        lat: position.coords.latitude,\n        log: this.longData\n      };\n      return this.$store.state.floadGeo = coord4;\n    }\n  }\n\n  window.clearwatch = navigator.geolocation.watchPosition(showPosition, geoError, geoOptions);\n}; // getLocationV();\n\n\nexport default {\n  name: 'geolocate',\n\n  data() {\n    return {\n      msg: 'Geo Locate',\n      GeoRef: {\n        latitude: latData,\n        longitude: longData,\n        precisao: precData,\n        altutude: altData,\n        presaltitude: preaData,\n        orientacao: headData\n      },\n      numLT: this.latdata,\n      numLG: this.longdata,\n      a: \"\",\n      b: ''\n    };\n  },\n\n  computed: {\n    list() {\n      var coord2 = {\n        latitude: latData,\n        longitude: longData,\n        precisao: this.precData,\n        altutude: this.altData,\n        presaltitude: this.preaData,\n        orientacao: this.headData,\n        msg: 'vai'\n      };\n      this.$store.dispatch('setTest', coord2);\n      this.GeoRef = this.coord2;\n      this.$watch('GeoRef', function (newValue, oldValue) {\n        // Esta função será executada quando `vm.a` mudar\n        console.log('>>geo>>  xxx  ', this.GeoRef);\n      });\n      return this.GeoRef;\n    }\n\n  },\n  watch: {\n    numLT: function (val) {\n      console.log(val);\n      return this.b = val;\n    },\n    numLG: function (val) {\n      this.a = val;\n    }\n  },\n  methods: {\n    sendop: function (event) {\n      var coord2 = {\n        latitude: latData,\n        longitude: longData,\n        precisao: precData,\n        altutude: altData,\n        presaltitude: preaData,\n        orientacao: headData\n      }; //this.$store.state.floadGeo= coord\n\n      this.$store.dispatch('setTest', coord2);\n      console.log('>>geo>>  xxx  ', coord2);\n    },\n\n    avancar() {\n      var coord2 = {\n        latitude: latData,\n        longitude: longData,\n        precisao: precData,\n        altutude: altData,\n        presaltitude: preaData,\n        orientacao: headData\n      };\n      this.$store.dispatch('setGeoL', coord2);\n      console.log('>>geofinalll>>', coord2);\n      navigator.geolocation.clearWatch(clearwatch);\n      var mySwiper = new Swiper('.swiper-container', {});\n      mySwiper.slideTo(3);\n    },\n\n    getLocation() {\n      getLocationV();\n      console.log('lat');\n      document.getElementById(\"latNum\").value = latData;\n      document.getElementById(\"logNum\").value = longData; //console.log('>>geo>>1',this.GeoRef);\n\n      var coord2 = {\n        latitude: latData,\n        longitude: longData,\n        precisao: precData,\n        altutude: altData,\n        presaltitude: preaData,\n        orientacao: headData\n      };\n      this.$store.dispatch('setGeoL', coord2); //   console.log('>>geo>>',GeoL)\n    }\n\n  }\n};",{"version":3,"sources":["Geolocate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;cACA;eACA;eACA;cACA;eACA;eACA,GACA;;gBACA;;mBACA;;sBAGA,AACA;AAHA;;gCAIA;qDACA,OACA;AACA;AACA;AACA;AACA;AACA;;6CAEA;6BACA;gEACA;SACA;sBAEA;AAEA;;kCAEA;AACA,AACA;;;AACA,AACA;;8BACA;+BACA;+BACA;8BACA;+BACA;+BACA,SACA;;8CACA;+DACA;kEACA;gEACA;mEACA;sEACA;kEACA;8CAEA;;0BACA;;6BAEA;kBACA,AACA;AAHA;0CAIA;AACA;AACA;;kFACA;AACA,GAEA;;;;QAKA;;SACA;;WAGA;;kBAEA;mBACA;kBACA;kBACA;sBACA;oBACA,AAEA;AARA;kBASA;kBACA;SACA;SACA,AACA;AAhBA;AAiBA;;;WAEA;;kBAEA;mBACA;uBACA;uBACA;2BACA;yBACA;aACA,AAEA;AATA;sCAUA;yBACA;0DACA;AACA;2CAEA;AACA;kBACA;AAEA,AAEA;;AAvBA;;0BAyBA;kBACA;sBACA;AACA;0BACA;eACA;AACA,AACA;AARA;;;;kBAaA;mBACA;kBACA;kBACA;sBACA;oBACA,AACA;AAPA,QADA,CASA;;sCACA;oCAEA;AACA;;cACA;;kBAEA;mBACA;kBACA;kBACA;sBACA;oBACA,AACA;AAPA;sCAQA;oCACA;uCACA;qDAEA,AACA;uBAEA;AACA;;kBACA;AACA;kBAEA;gDACA;gDACA,UACA;;;kBAEA;mBACA;kBACA;kBACA;sBACA;oBACA,AACA;AAPA;sCAQA,SACA;AAGA,AACA;;AAtDA;AAtDA","file":"Geolocate.vue","sourceRoot":"src/components/comps","sourcesContent":["<template>\n  <div  class=\"geolocate\">\n    <h4>{{ msg }}</h4>\n   \n  <div slot=\"header\" class=\"clearfix\">\n    <span>Coords</span>\n   \n  </div>\n  <div id=\"lat1\" class=\"text item\">\n  \n  </div>\n    <div id=\"long1\" class=\"text item\">\n   \n  </div>\n    <div id=\"alt1\" class=\"text item\">\n   \n  </div>\n    <div id=\"prec\" class=\"text item\">\n    \n  </div>\n   <div id=\"prea\" class=\"text item\">\n    \n  </div>\n    <div id=\"head\" class=\"text item\">\n    \n  </div>\n\n    <p id=\"demo\">Lat</p>\n     <span>{{a}}</span>\n      <input id=\"latNum\" v-on:change=\"sendop\" type=\"number\" v-model.number=\"numLT\"/>\n      <br/>\n      <input id=\"logNum\" v-on:change=\"sendop\" type=\"number\" v-model.number=\"numLG\"/>\n      <br/>\n    <button class=\"btavancar\" @click=\"getLocation\">Get Location</button>\n      <br/>\n    <button class=\"btavancar\" style=\"margin:1em\" @click=\"avancar\">AVANÇAR</button>\n      \n  </div>\n</template>\n\n<script>\n    var latData = 0;\n    var longData = 0;\n    var precData = 0;\n    var altData = 0;\n    var preaData = 0;\n    var headData = 0;\n    //var firebase = require('firebase');\n    var $ = require('jquery');\n    import Swiper from 'swiper';\n    var geoOptions = {\n        enableHighAccuracy: true,\n\n    };\n    var geoError = function(error) {\n        console.log('Error occurred. Error code: ' + error.code);\n        // error.code can be:\n        //   0: unknown error\n        //   1: permission denied\n        //   2: position unavailable (error response from location provider)\n        //   3: timed out\n    };\n    window.getLocationV = function getLocation() {\n\n        if (navigator.geolocation) {\n            navigator.geolocation.watchPosition(showPosition, geoError, geoOptions);\n        } else {\n            $(\"#demo\").append(\"Geolocation is not supported by this browser.\");\n\n        }\n\n        function showPosition(position) {\n\n         /*   $(\"#demo\").text(\"Latitude: \" + position.coords.latitude +\n                \" Longitude: \" + position.coords.longitude + 'precisao:  ' + position.coords.accuracy + 'altitude:  ' + position.coords.altitude + 'altitude pcsn :  ' + position.coords.altitudeAccuracy + 'orientacao:  ' + position.coords.heading);*/\n            /* $(\"#demo\").append(\"Latitude: \" + position.coords.latitude + \n            \"<br>Longitude: \" + position.coords.longitude );*/\n            latData = position.coords.latitude;\n            longData = position.coords.longitude;\n            precData = position.coords.accuracy;\n            altData = position.coords.altitude;\n            preaData = position.coords.altitudeAccuracy;\n            headData = position.coords.heading;\n            // this.$store.dispath('setGeoL', {latitude: latData, longitude: longData})\n            document.getElementById(\"latNum\").value = latData;\n            document.getElementById(\"lat1\").innerHTML =\"Latitude: \" +  latData;\n            document.getElementById(\"long1\").innerHTML =\" Longitude: \" + longData;\n            document.getElementById(\"alt1\").innerHTML = 'Altitude:  ' +  altData;\n            document.getElementById(\"prec\").innerHTML ='Precisao c :  ' + precData;\n            document.getElementById(\"prea\").innerHTML ='altitude pcsn :  ' + preaData;\n            document.getElementById(\"head\").innerHTML ='orientacao:  ' + headData;\n            document.getElementById(\"logNum\").value = longData;\n\n            function xx(position) {\n                var coord4 = {\n                    lat: position.coords.latitude,\n                    log: this.longData\n                };\n                return this.$store.state.floadGeo = coord4;\n            }\n        }\n        window.clearwatch = navigator.geolocation.watchPosition(showPosition, geoError, geoOptions);\n    };\n    // getLocationV();\n\n    export default {\n\n\n\n        name: 'geolocate',\n        data() {\n            return {\n                msg: 'Geo Locate',\n\n                GeoRef: {\n                    latitude: latData, \n                    longitude:longData, \n                    precisao: precData, \n                    altutude: altData, \n                    presaltitude:  preaData, \n                    orientacao: headData, \n },\n\n                numLT: this.latdata,\n                numLG: this.longdata,\n                a: \"\",\n                b:''\n            }\n        },\n        computed:{\n            list(){\n                 var coord2 = {\n                    latitude: latData, \n                    longitude:longData, \n                    precisao: this.precData, \n                    altutude: this.altData, \n                    presaltitude:  this.preaData, \n                    orientacao: this.headData,\n                     msg: 'vai'\n                };\n                \n                this.$store.dispatch('setTest', coord2 );\n                this.GeoRef = this.coord2;\n                this.$watch('GeoRef', function (newValue, oldValue) {\n  // Esta função será executada quando `vm.a` mudar\n              console.log('>>geo>>  xxx  ',this.GeoRef);       \n                    \n})\n                return this.GeoRef;\n            }\n            \n        },\n\n        watch: {\n            numLT: function(val) {\n                console.log(val);\n            return     this.b = val;\n            },\n            numLG: function(val) {\n                this.a = val;\n            }\n        },\n        methods: {\n            sendop: function(event) {\n\n               var coord2 = {\n                    latitude: latData, \n                    longitude: longData, \n                    precisao: precData, \n                    altutude: altData, \n                    presaltitude:  preaData, \n                    orientacao: headData,\n                };\n                //this.$store.state.floadGeo= coord\n               this.$store.dispatch('setTest', coord2);\n                console.log('>>geo>>  xxx  ',coord2);\n\n            },\n            avancar() {\n                var coord2 = {\n                    latitude: latData, \n                    longitude: longData, \n                    precisao: precData, \n                    altutude: altData, \n                    presaltitude:  preaData, \n                    orientacao: headData,\n                };\n                this.$store.dispatch('setGeoL', coord2);\n              console.log('>>geofinalll>>',coord2);\n                navigator.geolocation.clearWatch(clearwatch);\n                var mySwiper = new Swiper('.swiper-container', {\n\n                });\n                mySwiper.slideTo(3);\n\n            },\n            getLocation() {\n                getLocationV();\n                console.log('lat');\n               \n                document.getElementById(\"latNum\").value = latData;\n                document.getElementById(\"logNum\").value = longData;\n //console.log('>>geo>>1',this.GeoRef);\n                var coord2 = {\n                    latitude: latData, \n                    longitude: longData, \n                    precisao: precData, \n                    altutude: altData, \n                    presaltitude:  preaData, \n                    orientacao: headData,\n                };\n                this.$store.dispatch('setGeoL', coord2);\n                //   console.log('>>geo>>',GeoL)\n            }\n\n\n        }\n    }\n\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n\n    h1,\n    h2,\n    p {\n        font-weight: normal;\n        color: black;\n    }\n\n    input {\n        background-color: azure;\n        margin: 1em;\n    }\n  button {\n        color: aliceblue;\n        background-color: #000;\n        font-size: .5em;\n        width: 100px;\n        padding: 1em 2em;\n        margin: 1em;\n        border: none !important;\n        border-radius: 3px;\n        box-shadow: none;\n    }\n    .text {\n        font-size: 8px;\n    }\n\n    .item {\n        margin-bottom: 18px;\n    }\n\n    .clearfix:before,\n    .clearfix:after {\n        display: table;\n        content: \"\";\n    }\n\n    .clearfix:after {\n        clear: both\n    }\n\n    .box-card {\n        width: 60vw;\n    }\n\n</style>\n"]}]}