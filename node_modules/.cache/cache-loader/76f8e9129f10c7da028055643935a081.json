{"remainingRequest":"/Users/danielsecco/Downloads/quasela-master/node_modules/babel-loader/lib/index.js!/Users/danielsecco/Downloads/quasela-master/src/assets/js/pushnoty.js","dependencies":[{"path":"/Users/danielsecco/Downloads/quasela-master/src/assets/js/pushnoty.js","mtime":1529287023000},{"path":"/Users/danielsecco/Downloads/quasela-master/node_modules/cache-loader/dist/cjs.js","mtime":1528752079000},{"path":"/Users/danielsecco/Downloads/quasela-master/node_modules/babel-loader/lib/index.js","mtime":1519636541000}],"contextDependencies":[],"result":["import { firestore } from '../../main.js';\nimport * as config from './config.js';\n'use strict';\n\nwindow.onload = function () {\n  const applicationServerPublicKey = config.pushTokem;\n  const pushButton = document.querySelector('.js-push-btn');\n  let isSubscribed = false;\n  let swRegistration = null;\n\n  function urlB64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  }\n\n  function updateBtn() {\n    if (Notification.permission === 'denied') {\n      pushButton.textContent = 'Push Messaging Blocked.';\n      pushButton.disabled = true;\n      updateSubscriptionOnServer(null);\n      return;\n    }\n\n    if (isSubscribed) {\n      pushButton.textContent = 'Disable Push Messaging';\n    } else {\n      pushButton.textContent = 'Enable Push Messaging';\n    }\n\n    pushButton.disabled = false;\n  }\n\n  function updateSubscriptionOnServer(subscription) {\n    // TODO: Send subscription to application server\n    const subscriptionJson = document.querySelector('.js-subscription-json');\n    const subscriptionDetails = document.querySelector('.js-subscription-details');\n\n    if (subscription) {\n      subscriptionJson.textContent = JSON.stringify(subscription);\n      subscriptionDetails.classList.remove('is-invisible');\n    } else {\n      subscriptionDetails.classList.add('is-invisible');\n    }\n  }\n\n  pushButton.addEventListener('click', function () {\n    pushButton.disabled = true;\n\n    if (isSubscribed) {\n      unsubscribeUser();\n    } else {\n      subscribeUser();\n    }\n  });\n\n  function subscribeUser() {\n    const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\n    swRegistration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey\n    }).then(function (subscription) {\n      console.log('User is subscribed');\n      updateSubscriptionOnServer(subscription);\n      isSubscribed = true;\n      updateBtn();\n    }).catch(function (err) {\n      console.log('Failed to subscribe the user: ', err);\n      updateBtn();\n    });\n  }\n\n  function unsubscribeUser() {\n    swRegistration.pushManager.getSubscription().then(function (subscription) {\n      if (subscription) {\n        return subscription.unsubscribe();\n      }\n    }).catch(function (error) {\n      console.log('Error unsubscribing', error);\n    }).then(function () {\n      updateSubscriptionOnServer(null);\n      console.log('User is unsubscribed.');\n      isSubscribed = false;\n      updateBtn();\n    });\n  }\n\n  function initializeUI() {\n    pushButton.addEventListener('click', function () {\n      pushButton.disabled = true;\n\n      if (isSubscribed) {// TODO: Unsubscribe user\n      } else {\n        subscribeUser();\n      }\n    }); // Set the initial subscription value\n\n    swRegistration.pushManager.getSubscription().then(function (subscription) {\n      isSubscribed = !(subscription === null);\n      updateSubscriptionOnServer(subscription);\n\n      if (isSubscribed) {\n        console.log('User IS subscribed.');\n      } else {\n        console.log('User is NOT subscribed.');\n      }\n\n      updateBtn();\n    });\n  }\n\n  if ('serviceWorker' in navigator && 'PushManager' in window) {\n    console.log('Service Worker and Push is supported'); // sw.for dev\n\n    navigator.serviceWorker.register('service-worker.js').then(function (swReg) {\n      console.log('Service Worker is registered', swReg);\n      swRegistration = swReg;\n      initializeUI();\n    }).catch(function (error) {\n      console.error('Service Worker Error', error);\n    });\n  } else {\n    console.warn('Push messaging is not supported');\n    pushButton.textContent = 'Push Not Supported';\n  }\n  /*if ('serviceWorker' in navigator && 'PushManager' in window) {\n      console.log('Service Worker and Push is supported');\n  // sw.for dev\n     var oi = function (swReg) {\n              console.log('Service Worker is registered', swReg);\n  \n              swRegistration = swReg;\n            initializeUI();\n          };\n          oi().catch(function (error) {\n              console.error('Service Worker Error', error);\n          });\n  } else {\n      console.warn('Push messaging is not supported');\n      pushButton.textContent = 'Push Not Supported';\n  };\n      */\n  ////////////////////////////////////\n\n\n  console.log('This is executed right after setTimeout()');\n  firestore.collection(\"sid\").where(\"cod_Tree\", \">=\", 0).get().then(function (querySnapshot) {\n    console.log('teste');\n    querySnapshot.forEach(function (doc) {\n      // doc.data() is never undefined for query doc snapshots\n      //console.log(doc.id, \" => \", doc.data());\n      console.table(doc.data());\n    });\n    console.log('end');\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \", error);\n  });\n};",{"version":3,"sources":["src/assets/js/pushnoty.js"],"names":["firestore","config","window","onload","applicationServerPublicKey","pushTokem","pushButton","document","querySelector","isSubscribed","swRegistration","urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt","updateBtn","Notification","permission","textContent","disabled","updateSubscriptionOnServer","subscription","subscriptionJson","subscriptionDetails","JSON","stringify","classList","remove","add","addEventListener","unsubscribeUser","subscribeUser","applicationServerKey","pushManager","subscribe","userVisibleOnly","then","console","log","catch","err","getSubscription","unsubscribe","error","initializeUI","navigator","serviceWorker","register","swReg","warn","collection","where","get","querySnapshot","forEach","doc","table","data"],"mappings":"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","sourceRoot":"/Users/danielsecco/Downloads/quasela-master","sourcesContent":["\nimport {firestore} from '../../main.js';\nimport * as config from './config.js';\n 'use strict';\n\n\nwindow.onload = function() {\n   \nconst applicationServerPublicKey = config.pushTokem;\nconst pushButton = document.querySelector('.js-push-btn');\n\nlet isSubscribed = false;\nlet swRegistration = null;\n\nfunction urlB64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}\n\nfunction updateBtn() {\n    if (Notification.permission === 'denied') {\n        pushButton.textContent = 'Push Messaging Blocked.';\n        pushButton.disabled = true;\n        updateSubscriptionOnServer(null);\n        return;\n    }\n\n    if (isSubscribed) {\n        pushButton.textContent = 'Disable Push Messaging';\n    } else {\n        pushButton.textContent = 'Enable Push Messaging';\n    }\n\n    pushButton.disabled = false;\n}\n\nfunction updateSubscriptionOnServer(subscription) {\n    // TODO: Send subscription to application server\n\n    const subscriptionJson = document.querySelector('.js-subscription-json');\n    const subscriptionDetails =\n        document.querySelector('.js-subscription-details');\n\n    if (subscription) {\n        subscriptionJson.textContent = JSON.stringify(subscription);\n        subscriptionDetails.classList.remove('is-invisible');\n    } else {\n        subscriptionDetails.classList.add('is-invisible');\n    }\n}\npushButton.addEventListener('click', function () {\n    pushButton.disabled = true;\n    if (isSubscribed) {\n        unsubscribeUser();\n    } else {\n        subscribeUser();\n    }\n});\n\nfunction subscribeUser() {\n    const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\n    swRegistration.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: applicationServerKey\n        })\n        .then(function (subscription) {\n            console.log('User is subscribed');\n\n            updateSubscriptionOnServer(subscription);\n\n            isSubscribed = true;\n\n            updateBtn();\n        })\n        .catch(function (err) {\n            console.log('Failed to subscribe the user: ', err);\n            updateBtn();\n        });\n}\n\nfunction unsubscribeUser() {\n    swRegistration.pushManager.getSubscription()\n        .then(function (subscription) {\n            if (subscription) {\n                return subscription.unsubscribe();\n            }\n        })\n        .catch(function (error) {\n            console.log('Error unsubscribing', error);\n        })\n        .then(function () {\n            updateSubscriptionOnServer(null);\n\n            console.log('User is unsubscribed.');\n            isSubscribed = false;\n\n            updateBtn();\n        });\n}\n\nfunction initializeUI() {\n    pushButton.addEventListener('click', function () {\n        pushButton.disabled = true;\n        if (isSubscribed) {\n            // TODO: Unsubscribe user\n        } else {\n            subscribeUser();\n        }\n    });\n\n    // Set the initial subscription value\n    swRegistration.pushManager.getSubscription()\n        .then(function (subscription) {\n            isSubscribed = !(subscription === null);\n\n            updateSubscriptionOnServer(subscription);\n\n            if (isSubscribed) {\n                console.log('User IS subscribed.');\n            } else {\n                console.log('User is NOT subscribed.');\n            }\n\n            updateBtn();\n        });\n}\n\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n    console.log('Service Worker and Push is supported');\n// sw.for dev\n    navigator.serviceWorker.register('service-worker.js')  \n        .then(function (swReg) {\n            console.log('Service Worker is registered', swReg);\n\n            swRegistration = swReg;\n            initializeUI();\n        })\n        .catch(function (error) {\n            console.error('Service Worker Error', error);\n        });\n} else {\n    console.warn('Push messaging is not supported');\n    pushButton.textContent = 'Push Not Supported';\n}\n\n    \n/*if ('serviceWorker' in navigator && 'PushManager' in window) {\n    console.log('Service Worker and Push is supported');\n// sw.for dev\n   var oi = function (swReg) {\n            console.log('Service Worker is registered', swReg);\n\n            swRegistration = swReg;\n          initializeUI();\n        };\n        oi().catch(function (error) {\n            console.error('Service Worker Error', error);\n        });\n} else {\n    console.warn('Push messaging is not supported');\n    pushButton.textContent = 'Push Not Supported';\n};\n    */\n    ////////////////////////////////////\n    \n    \n\n    \nconsole.log('This is executed right after setTimeout()');\nfirestore.collection(\"sid\").where(\"cod_Tree\", \">=\", 0).get()\n    .then(function (querySnapshot) {\n\n        console.log('teste')\n\n        querySnapshot.forEach(function (doc) {\n            // doc.data() is never undefined for query doc snapshots\n            //console.log(doc.id, \" => \", doc.data());\n\t\t\tconsole.table(doc.data());\n        });\n\n\n        console.log('end')\n    })\n    .catch(function (error) {\n        console.log(\"Error getting documents: \", error);\n    });}\n\n"]}]}